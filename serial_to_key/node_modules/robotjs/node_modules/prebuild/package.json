{
  "name": "prebuild",
  "version": "4.2.2",
  "description": "A command line tool for easily doing prebuilds for multiple version of node/iojs on a specific platform",
  "scripts": {
    "test": "tape test && npm run audit && npm run lint",
    "audit": "nsp check",
    "lint": "standard"
  },
  "keywords": [
    "prebuilt",
    "binaries",
    "native",
    "addon",
    "module",
    "c",
    "c++",
    "bindings",
    "devops"
  ],
  "dependencies": {
    "async": "^1.4.0",
    "expand-template": "^1.0.0",
    "ghreleases": "^1.0.2",
    "github-from-package": "0.0.0",
    "minimist": "^1.1.2",
    "mkdirp": "^0.5.1",
    "node-gyp": "^3.0.3",
    "node-ninja": "^1.0.1",
    "noop-logger": "^0.1.0",
    "npmlog": "^2.0.0",
    "os-homedir": "^1.0.1",
    "pump": "^1.0.0",
    "rc": "^1.0.3",
    "simple-get": "^1.4.2",
    "tar-fs": "^1.7.0",
    "tar-stream": "^1.2.1",
    "xtend": "^4.0.1"
  },
  "devDependencies": {
    "a-native-module": "^1.0.0",
    "nsp": "^2.2.0",
    "rimraf": "^2.4.2",
    "standard": "^7.0.0",
    "tape": "^4.0.1"
  },
  "bin": {
    "prebuild": "./bin.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mafintosh/prebuild.git"
  },
  "author": {
    "name": "Mathias Buus",
    "url": "@mafintosh"
  },
  "contributors": [
    {
      "name": "Julian Gruber",
      "email": "julian@juliangruber.com",
      "url": "https://github.com/juliangruber"
    },
    {
      "name": "Brett Lawson",
      "email": "brett19@gmail.com",
      "url": "https://github.com/brett19"
    },
    {
      "name": "Pieter Hintjens",
      "email": "ph@imatix.com",
      "url": "https://github.com/hintjens"
    },
    {
      "name": "Lars-Magnus Skog",
      "email": "ralphtheninja@riseup.net",
      "url": "https://github.com/ralphtheninja"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mafintosh/prebuild/issues"
  },
  "homepage": "https://github.com/mafintosh/prebuild",
  "readme": "# prebuild\n\nA command line tool for easily doing prebuilds for multiple version of node/iojs on a specific platform.\n\n```\n$ npm install -g prebuild\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/prebuild.svg?style=flat)](http://travis-ci.org/mafintosh/prebuild) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n\n## Features\n\n* Builds native modules for any version of node/iojs, without having to switch between different versions of node/iojs to do so. This works by only downloading the correct headers and telling `node-gyp` to use those instead of the ones installed on your system.\n* Upload (`--upload`) prebuilt binaries to GitHub.\n* Installs (`--install`) prebuilt binaries from GitHub by default or from a host of your choice. The url format can be customized as you see fit.\n* Installed binaries are cached in `~/.npm/_prebuilds/` so you only need to download them once.\n* Support for stripping (`--strip`) debug information.\n\n## Building\n\nBuilding is only required for targets with different [ABI](https://en.wikipedia.org/wiki/Application_binary_interface) versions. To build for all *supported* abi versions greater than `0.8` ([example from leveldown](https://github.com/Level/leveldown/blob/ea5999dbd5fddf8f811b6c14162a3282b24ef7a9/package.json#L55)):\n\n```\nprebuild --all\n```\n\nAlternatively, to build for some specific versions you can do:\n\n```\nprebuild -b 0.10.42 -b 0.12.10 -b 4.3.0\n```\n\nSee [`targets.js`](https://github.com/mafintosh/prebuild/blob/master/targets.js) for currently available versions.\n\nFor more options run `prebuild --help`. The prebuilds created are compatible with [node-pre-gyp](https://github.com/mapbox/node-pre-gyp)\n\n\n## Uploading\n\n`prebuild` supports uploading prebuilds to GitHub releases. If the release doesn't exist, it will be created for you. To upload prebuilds simply add the `-u <github-token>` option:\n\n```\n$ prebuild --all -u <github-token>\n```\n\nIf you don't want to use the token on cli you can put it in `~/.prebuildrc`:\n\n```\nupload=<github-token>\n```\n\nNote that `--upload` will only upload the targets that was built and stored in `./prebuilds`, so `prebuild -u <github-token> -b 4.3.0` will only upload the binary for the `4.3.0` target.\n\nYou can use `prebuild --upload-all` to upload all files from the `./prebuilds` folder.\n\n## Installing\n\n`prebuild` supports installing prebuilt binaries from GitHub by default. To install for your platform, use the `--install` flag.\n\n```\n$ prebuild --install\n```\n\nIf no suitable binary can be found, `prebuild` will fallback to `node-gyp rebuild`. Native modules that have a javascript fallback can use `--no-compile` to prevent this.\n\nOnce a binary has been downloaded `prebuild` will `require()` the module and if that fails it will also fallback to building it.\n\nInstalled binaries are cached in your npm cache meaning you'll only have to download them once.\n\nAdd `prebuild --install` to your `package.json` so the binaries will be installed when the module is installed\n\n```json\n{\n  \"name\": \"a-native-module\",\n  \"scripts\": {\n    \"install\": \"prebuild --install\"\n  },\n  \"dependencies\": {\n    \"prebuild\": \"^4.0.0\"\n  }\n}\n```\n\nIf you are hosting your binaries elsewhere you can provide a host to the `--install` flag. The host string can also be a template for constructing more intrinsic urls. Install from `example.com` with a custom format for the binary name:\n\n```\n$ prebuild --install https://example.com/{name}-{version}-{abi}-{platform}{libc}-{arch}.tar.gz\n```\n\n`--install` will download binaries when installing from npm and compile in other cases. If you want `prebuild` to always download binaries you can use `--download` instead of `--install`. Either way, if downloading fails for any reason, it will fallback to compiling the code.\n\nThere's also support for `node-pre-gyp` style by utilizing the `binary` property in `package.json`.\n\n### Formatting urls\n\nThe following placeholders can be used:\n\n* `{name}` or `{package_name}`: the package name taken from `package.json`\n* `{version}`: package version taken from `package.json`\n* `{major}`: major version taken from `version`\n* `{minor}`: minor version taken from `version`\n* `{patch}`: patch version taken from `version`\n* `{prerelease}`: prelease version taken from `version`\n* `{build}`: build version taken from `version`\n* `{abi}` or `{node_abi}`: ABI version of node/iojs taken from current `--target` or `process.version` if not specified, see `ABI` section below for more information\n* `{platform}`: platform taken from `--platform` or `process.platform` if not specified\n* `{arch}`: architecture taken from `--arch` or `process.arch` if not specified\n* `{libc}`: libc setting for alternative libc taken from `--libc` or LIBC env var or blank if not specified\n* `{configuration}`: `'Debug'` if `--debug` is specified, otherwise `'Release'`\n* `{module_name}`: taken from `binary.module_name` property from `package.json`\n\n## Create GitHub Token\n\nA GitHub token is needed for two reasons:\n\n* Create a GitHub release ([leveldown example](https://github.com/Level/leveldown/releases/tag/v1.4.4))\n* Upload the prebuilt binaries to that release\n\nTo create a token:\n\n* Go to [this page](https://github.com/settings/tokens)\n* Click the `Generate new token` button\n* Give the token a name and click the `Generate token` button, see below\n\n![create token](images/create-token.png)\n\nThe default scopes should be fine.\n\n## Help\n\n```\n$ prebuild -h\nprebuild [options]\n\n  --path        -p  path        (make a prebuild here)\n  --target      -t  version     (version to build or install for)\n  --prebuild    -b  version     (version to prebuild against)\n  --all                         (prebuild for all known abi versions)\n  --install                     (download when using npm, compile otherwise)\n  --download    -d  [url]       (download prebuilds, no url means github)\n  --upload      -u  [gh-token]  (upload prebuilds to github)\n  --upload-all  -u  [gh-token]  (upload all files from ./prebuilds folder to github)\n  --preinstall  -i  script      (run this script before prebuilding)\n  --compile     -c              (compile your project using node-gyp)\n  --no-compile                  (skip compile fallback when downloading)\n  --abi                         (use provided abi rather than system abi)\n  --libc                        (use provided libc rather than system default)\n  --backend                     (specify build backend, default is 'node-gyp')\n  --strip                       (strip debug information)\n  --debug                       (set Debug or Release configuration)\n  --verbose                     (log verbosely)\n  --version                     (print prebuild version and exit)\n```\n\n## JavaScript API\n\n```js\nvar prebuild = require('prebuild')\n```\n\n### .download(opts, cb)\n\nOptions:\n\n- `.pkg` the parsed `package.json`\n- `.log` (optional)\n- `.nolocal` Don't check for cached builds (optional)\n- `.updateName` Function to update the binary name (optional)\n- `.path` Location of the module (default: `\".\"`)\n- `.abi` Node ABI version (default: `process.versions.modules`)\n- `.libc` OS libc (default: blank)\n- `.platform` OS platform (default: `process.platform`)\n- `.download` Precomputed url to download the binary from (optional)\n- `.all` (default: `false`)\n- `.force` (default: `false`)\n- `.proxy` (default: `process.env['HTTP_PROXY']`)\n- `.https-proxy` (default: `process.env['HTTP-PROXY']`)`\n\nExample:\n\n```js\nprebuild.download({\n  pkg: require('./package.json')\n}, function (err) {\n  // ...\n})\n```\n\n### .build(opts, version, cb)\n\nOptions:\n\n- `.log` (optional)\n- `.preinstall` (optional)\n- `.gyp` Provide a custom `node-gyp` instance (optional)\n- `.backend` Provide a custom `node-gyp` instance via string. Alternatives are `'node-gyp'` and `'node-ninja'` (optional, defaults to `'node-gyp'`)\n- `.args` Additional command line arguments to `node-gyp` (optional)\n- `.debug` Pass in `--debug` on command line to gyp backend (optional)\n\nExample:\n\n```js\nprebuild.build({}, version, function (err) {\n  // ...\n})\n```\n### Global options:\n\n- `.debug` Download or build a debug build (default: `false`)\n- `.arch` Processor architecture (default: `process.arch`)\n\n## Develop `prebuild`\n\nIf you want to hack on `prebuild` you need an environment to play around with. We recommend a setup similar\nto the following:\n\n* A fork of `prebuild`\n* A GitHub token (see above)\n* A native node module\n\n```bash\n$ git clone git@github.com:<your-nick>/prebuild\n$ cd prebuild && npm link && cd ..\n$ git clone git@github.com:<your-nick>/some-native-module\n```\n\nSince you did `npm link` on `prebuild` it will be installed globally. Now you can go ahead and try things out.\n\n```bash\n$ cd some-native-module\n$ prebuild --all --strip -u <github-token>\n```\n\nThis command would:\n\n* Build `some-native-module` for all targets listed in `targets.js` and store them in `./prebuilds/`\n* Strip binaries from debug information\n* Create a release on GitHub, if needed\n* Upload all binaries to that release, if not already uploaded\n\nBefore you commit your changes and send us a pull request, do run `npm test`.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "prebuild@4.2.2",
  "_shasum": "b05365e0e7f3af946369e1e44785708afd672c21",
  "_from": "prebuild@^4.1.1",
  "_resolved": "https://registry.npmjs.org/prebuild/-/prebuild-4.2.2.tgz"
}
